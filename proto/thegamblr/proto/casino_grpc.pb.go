// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: casino.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CasinoClient is the client API for Casino service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasinoClient interface {
	// CreateGame creates a game that players can join. The response returns a game_id which is needed by players
	// to register.
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	// JoinGame allows players to join a game created by CreateGame. A player provided PlayerId is required.
	// In the response object, the player will receive a player_id which should match unless it was taken, in which case
	// it will have a number appended to it. The response also provides the players seat number and a token. The token
	// is necessary to pass up in Action requests to verify who is performing the action.
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	// StartGame start the game!
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	// ReceiveUpdates will return a list of Actions that have occurred since the last time this was called. This should
	// be constantly polled. It will also return a bool indicating if it is this player's turn. If it is, a call to Act
	// is expected.
	ReceiveUpdates(ctx context.Context, in *ReceiveUpdatesRequest, opts ...grpc.CallOption) (*ReceiveUpdatesResponse, error)
	// Act allows a player to specify the action they want to take. Invalid actions will result in a Fold.
	// If a player tries to put in more chips than they have, they will be put all in. If a player tries to Raise with
	// less chips than is the minimum raise, they will automatically raise the minimum raise.
	Act(ctx context.Context, in *ActRequest, opts ...grpc.CallOption) (*ActResponse, error)
}

type casinoClient struct {
	cc grpc.ClientConnInterface
}

func NewCasinoClient(cc grpc.ClientConnInterface) CasinoClient {
	return &casinoClient{cc}
}

func (c *casinoClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, "/thegamblr.Casino/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, "/thegamblr.Casino/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, "/thegamblr.Casino/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoClient) ReceiveUpdates(ctx context.Context, in *ReceiveUpdatesRequest, opts ...grpc.CallOption) (*ReceiveUpdatesResponse, error) {
	out := new(ReceiveUpdatesResponse)
	err := c.cc.Invoke(ctx, "/thegamblr.Casino/ReceiveUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casinoClient) Act(ctx context.Context, in *ActRequest, opts ...grpc.CallOption) (*ActResponse, error) {
	out := new(ActResponse)
	err := c.cc.Invoke(ctx, "/thegamblr.Casino/Act", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasinoServer is the server API for Casino service.
// All implementations must embed UnimplementedCasinoServer
// for forward compatibility
type CasinoServer interface {
	// CreateGame creates a game that players can join. The response returns a game_id which is needed by players
	// to register.
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	// JoinGame allows players to join a game created by CreateGame. A player provided PlayerId is required.
	// In the response object, the player will receive a player_id which should match unless it was taken, in which case
	// it will have a number appended to it. The response also provides the players seat number and a token. The token
	// is necessary to pass up in Action requests to verify who is performing the action.
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	// StartGame start the game!
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	// ReceiveUpdates will return a list of Actions that have occurred since the last time this was called. This should
	// be constantly polled. It will also return a bool indicating if it is this player's turn. If it is, a call to Act
	// is expected.
	ReceiveUpdates(context.Context, *ReceiveUpdatesRequest) (*ReceiveUpdatesResponse, error)
	// Act allows a player to specify the action they want to take. Invalid actions will result in a Fold.
	// If a player tries to put in more chips than they have, they will be put all in. If a player tries to Raise with
	// less chips than is the minimum raise, they will automatically raise the minimum raise.
	Act(context.Context, *ActRequest) (*ActResponse, error)
	mustEmbedUnimplementedCasinoServer()
}

// UnimplementedCasinoServer must be embedded to have forward compatible implementations.
type UnimplementedCasinoServer struct {
}

func (UnimplementedCasinoServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedCasinoServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedCasinoServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedCasinoServer) ReceiveUpdates(context.Context, *ReceiveUpdatesRequest) (*ReceiveUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUpdates not implemented")
}
func (UnimplementedCasinoServer) Act(context.Context, *ActRequest) (*ActResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Act not implemented")
}
func (UnimplementedCasinoServer) mustEmbedUnimplementedCasinoServer() {}

// UnsafeCasinoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasinoServer will
// result in compilation errors.
type UnsafeCasinoServer interface {
	mustEmbedUnimplementedCasinoServer()
}

func RegisterCasinoServer(s grpc.ServiceRegistrar, srv CasinoServer) {
	s.RegisterService(&Casino_ServiceDesc, srv)
}

func _Casino_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thegamblr.Casino/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casino_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thegamblr.Casino/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casino_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thegamblr.Casino/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casino_ReceiveUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).ReceiveUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thegamblr.Casino/ReceiveUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).ReceiveUpdates(ctx, req.(*ReceiveUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Casino_Act_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasinoServer).Act(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thegamblr.Casino/Act",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasinoServer).Act(ctx, req.(*ActRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Casino_ServiceDesc is the grpc.ServiceDesc for Casino service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Casino_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thegamblr.Casino",
	HandlerType: (*CasinoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Casino_CreateGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _Casino_JoinGame_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _Casino_StartGame_Handler,
		},
		{
			MethodName: "ReceiveUpdates",
			Handler:    _Casino_ReceiveUpdates_Handler,
		},
		{
			MethodName: "Act",
			Handler:    _Casino_Act_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casino.proto",
}
