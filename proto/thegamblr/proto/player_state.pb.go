// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: player_state.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerStatus int32

const (
	PlayerStatus_OUT     PlayerStatus = 0
	PlayerStatus_FOLDED  PlayerStatus = 1
	PlayerStatus_PLAYING PlayerStatus = 2
	PlayerStatus_ALL_IN  PlayerStatus = 3
)

// Enum value maps for PlayerStatus.
var (
	PlayerStatus_name = map[int32]string{
		0: "OUT",
		1: "FOLDED",
		2: "PLAYING",
		3: "ALL_IN",
	}
	PlayerStatus_value = map[string]int32{
		"OUT":     0,
		"FOLDED":  1,
		"PLAYING": 2,
		"ALL_IN":  3,
	}
)

func (x PlayerStatus) Enum() *PlayerStatus {
	p := new(PlayerStatus)
	*p = x
	return p
}

func (x PlayerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_player_state_proto_enumTypes[0].Descriptor()
}

func (PlayerStatus) Type() protoreflect.EnumType {
	return &file_player_state_proto_enumTypes[0]
}

func (x PlayerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatus.Descriptor instead.
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return file_player_state_proto_rawDescGZIP(), []int{0}
}

type PlayerRoundResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many chips did a player win this round?
	ChipsWon uint64 `protobuf:"varint,1,opt,name=chips_won,json=chipsWon,proto3" json:"chips_won,omitempty"`
	// What cards did a player hold (may be null if the player mucked).
	Cards []*Card `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	// What did their hand make (only available if cards is available).
	HandStrength HandStrength `protobuf:"varint,3,opt,name=hand_strength,json=handStrength,proto3,enum=thegamblr.HandStrength" json:"hand_strength,omitempty"`
}

func (x *PlayerRoundResults) Reset() {
	*x = PlayerRoundResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRoundResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoundResults) ProtoMessage() {}

func (x *PlayerRoundResults) ProtoReflect() protoreflect.Message {
	mi := &file_player_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoundResults.ProtoReflect.Descriptor instead.
func (*PlayerRoundResults) Descriptor() ([]byte, []int) {
	return file_player_state_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerRoundResults) GetChipsWon() uint64 {
	if x != nil {
		return x.ChipsWon
	}
	return 0
}

func (x *PlayerRoundResults) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerRoundResults) GetHandStrength() HandStrength {
	if x != nil {
		return x.HandStrength
	}
	return HandStrength_UNSET
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information representing how much money this player has to bet with.
	Stack uint64 `protobuf:"varint,1,opt,name=stack,proto3" json:"stack,omitempty"`
	// An enum representing the Players Status.
	Status PlayerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=thegamblr.PlayerStatus" json:"status,omitempty"`
	// The players position at the table.
	SeatNumber uint32 `protobuf:"varint,3,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`
	// An ID provided by the player upon game registration.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
	// like how much money this player won and what cards they were playing with.
	RoundResults *PlayerRoundResults `protobuf:"bytes,5,opt,name=round_results,json=roundResults,proto3" json:"round_results,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_player_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_player_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_player_state_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerState) GetStack() uint64 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *PlayerState) GetStatus() PlayerStatus {
	if x != nil {
		return x.Status
	}
	return PlayerStatus_OUT
}

func (x *PlayerState) GetSeatNumber() uint32 {
	if x != nil {
		return x.SeatNumber
	}
	return 0
}

func (x *PlayerState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerState) GetRoundResults() *PlayerRoundResults {
	if x != nil {
		return x.RoundResults
	}
	return nil
}

var File_player_state_proto protoreflect.FileDescriptor

var file_player_state_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x68, 0x65, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x1a,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x12,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x77, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x69, 0x70, 0x73, 0x57, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x68, 0x65, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x74, 0x68, 0x65, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x68, 0x65,
	0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x68, 0x65, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x2a, 0x3c, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x03, 0x42, 0x11,
	0x5a, 0x0f, 0x74, 0x68, 0x65, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_player_state_proto_rawDescOnce sync.Once
	file_player_state_proto_rawDescData = file_player_state_proto_rawDesc
)

func file_player_state_proto_rawDescGZIP() []byte {
	file_player_state_proto_rawDescOnce.Do(func() {
		file_player_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_player_state_proto_rawDescData)
	})
	return file_player_state_proto_rawDescData
}

var file_player_state_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_player_state_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_player_state_proto_goTypes = []interface{}{
	(PlayerStatus)(0),          // 0: thegamblr.PlayerStatus
	(*PlayerRoundResults)(nil), // 1: thegamblr.PlayerRoundResults
	(*PlayerState)(nil),        // 2: thegamblr.PlayerState
	(*Card)(nil),               // 3: thegamblr.Card
	(HandStrength)(0),          // 4: thegamblr.HandStrength
}
var file_player_state_proto_depIdxs = []int32{
	3, // 0: thegamblr.PlayerRoundResults.cards:type_name -> thegamblr.Card
	4, // 1: thegamblr.PlayerRoundResults.hand_strength:type_name -> thegamblr.HandStrength
	0, // 2: thegamblr.PlayerState.status:type_name -> thegamblr.PlayerStatus
	1, // 3: thegamblr.PlayerState.round_results:type_name -> thegamblr.PlayerRoundResults
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_player_state_proto_init() }
func file_player_state_proto_init() {
	if File_player_state_proto != nil {
		return
	}
	file_card_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_player_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRoundResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_player_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_player_state_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_player_state_proto_goTypes,
		DependencyIndexes: file_player_state_proto_depIdxs,
		EnumInfos:         file_player_state_proto_enumTypes,
		MessageInfos:      file_player_state_proto_msgTypes,
	}.Build()
	File_player_state_proto = out.File
	file_player_state_proto_rawDesc = nil
	file_player_state_proto_goTypes = nil
	file_player_state_proto_depIdxs = nil
}
