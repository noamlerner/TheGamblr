// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board_state.proto

package thegamblr;

public final class BoardStateOuterClass {
  private BoardStateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BoardStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:thegamblr.BoardState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    java.util.List<thegamblr.CardOuterClass.Card> 
        getCommunityCardsList();
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    thegamblr.CardOuterClass.Card getCommunityCards(int index);
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    int getCommunityCardsCount();
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
        getCommunityCardsOrBuilderList();
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    thegamblr.CardOuterClass.CardOrBuilder getCommunityCardsOrBuilder(
        int index);

    /**
     * <pre>
     * Provides info: How much money is in the pot.
     * </pre>
     *
     * <code>uint64 pot = 2;</code>
     * @return The pot.
     */
    long getPot();

    /**
     * <pre>
     * Enum representing what stage the current round is in.
     * </pre>
     *
     * <code>.thegamblr.Stage stage = 3;</code>
     * @return The enum numeric value on the wire for stage.
     */
    int getStageValue();
    /**
     * <pre>
     * Enum representing what stage the current round is in.
     * </pre>
     *
     * <code>.thegamblr.Stage stage = 3;</code>
     * @return The stage.
     */
    thegamblr.StageOuterClass.Stage getStage();

    /**
     * <pre>
     * An index representing where the small blind button is. The small blind button is the index of the player that pays
     * the small blind and the one that is first to act on the Flop, Turn and River.
     * </pre>
     *
     * <code>uint32 smallBlindButton = 4;</code>
     * @return The smallBlindButton.
     */
    int getSmallBlindButton();

    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    java.util.List<thegamblr.PlayerStateOuterClass.PlayerState> 
        getPlayersList();
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    thegamblr.PlayerStateOuterClass.PlayerState getPlayers(int index);
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    int getPlayersCount();
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    java.util.List<? extends thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder> 
        getPlayersOrBuilderList();
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder getPlayersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code thegamblr.BoardState}
   */
  public static final class BoardState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:thegamblr.BoardState)
      BoardStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BoardState.newBuilder() to construct.
    private BoardState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BoardState() {
      communityCards_ = java.util.Collections.emptyList();
      stage_ = 0;
      players_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BoardState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BoardState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                communityCards_ = new java.util.ArrayList<thegamblr.CardOuterClass.Card>();
                mutable_bitField0_ |= 0x00000001;
              }
              communityCards_.add(
                  input.readMessage(thegamblr.CardOuterClass.Card.parser(), extensionRegistry));
              break;
            }
            case 16: {

              pot_ = input.readUInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              stage_ = rawValue;
              break;
            }
            case 32: {

              smallBlindButton_ = input.readUInt32();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                players_ = new java.util.ArrayList<thegamblr.PlayerStateOuterClass.PlayerState>();
                mutable_bitField0_ |= 0x00000002;
              }
              players_.add(
                  input.readMessage(thegamblr.PlayerStateOuterClass.PlayerState.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          communityCards_ = java.util.Collections.unmodifiableList(communityCards_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          players_ = java.util.Collections.unmodifiableList(players_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return thegamblr.BoardStateOuterClass.internal_static_thegamblr_BoardState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return thegamblr.BoardStateOuterClass.internal_static_thegamblr_BoardState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              thegamblr.BoardStateOuterClass.BoardState.class, thegamblr.BoardStateOuterClass.BoardState.Builder.class);
    }

    public static final int COMMUNITY_CARDS_FIELD_NUMBER = 1;
    private java.util.List<thegamblr.CardOuterClass.Card> communityCards_;
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    @java.lang.Override
    public java.util.List<thegamblr.CardOuterClass.Card> getCommunityCardsList() {
      return communityCards_;
    }
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
        getCommunityCardsOrBuilderList() {
      return communityCards_;
    }
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    @java.lang.Override
    public int getCommunityCardsCount() {
      return communityCards_.size();
    }
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    @java.lang.Override
    public thegamblr.CardOuterClass.Card getCommunityCards(int index) {
      return communityCards_.get(index);
    }
    /**
     * <pre>
     * CommunityCards represent the card available to everyone on the board. They will always be ordered -
     * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
     * </pre>
     *
     * <code>repeated .thegamblr.Card community_cards = 1;</code>
     */
    @java.lang.Override
    public thegamblr.CardOuterClass.CardOrBuilder getCommunityCardsOrBuilder(
        int index) {
      return communityCards_.get(index);
    }

    public static final int POT_FIELD_NUMBER = 2;
    private long pot_;
    /**
     * <pre>
     * Provides info: How much money is in the pot.
     * </pre>
     *
     * <code>uint64 pot = 2;</code>
     * @return The pot.
     */
    @java.lang.Override
    public long getPot() {
      return pot_;
    }

    public static final int STAGE_FIELD_NUMBER = 3;
    private int stage_;
    /**
     * <pre>
     * Enum representing what stage the current round is in.
     * </pre>
     *
     * <code>.thegamblr.Stage stage = 3;</code>
     * @return The enum numeric value on the wire for stage.
     */
    @java.lang.Override public int getStageValue() {
      return stage_;
    }
    /**
     * <pre>
     * Enum representing what stage the current round is in.
     * </pre>
     *
     * <code>.thegamblr.Stage stage = 3;</code>
     * @return The stage.
     */
    @java.lang.Override public thegamblr.StageOuterClass.Stage getStage() {
      @SuppressWarnings("deprecation")
      thegamblr.StageOuterClass.Stage result = thegamblr.StageOuterClass.Stage.valueOf(stage_);
      return result == null ? thegamblr.StageOuterClass.Stage.UNRECOGNIZED : result;
    }

    public static final int SMALLBLINDBUTTON_FIELD_NUMBER = 4;
    private int smallBlindButton_;
    /**
     * <pre>
     * An index representing where the small blind button is. The small blind button is the index of the player that pays
     * the small blind and the one that is first to act on the Flop, Turn and River.
     * </pre>
     *
     * <code>uint32 smallBlindButton = 4;</code>
     * @return The smallBlindButton.
     */
    @java.lang.Override
    public int getSmallBlindButton() {
      return smallBlindButton_;
    }

    public static final int PLAYERS_FIELD_NUMBER = 5;
    private java.util.List<thegamblr.PlayerStateOuterClass.PlayerState> players_;
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    @java.lang.Override
    public java.util.List<thegamblr.PlayerStateOuterClass.PlayerState> getPlayersList() {
      return players_;
    }
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder> 
        getPlayersOrBuilderList() {
      return players_;
    }
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    @java.lang.Override
    public int getPlayersCount() {
      return players_.size();
    }
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerState getPlayers(int index) {
      return players_.get(index);
    }
    /**
     * <pre>
     * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
     * </pre>
     *
     * <code>repeated .thegamblr.PlayerState players = 5;</code>
     */
    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder getPlayersOrBuilder(
        int index) {
      return players_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < communityCards_.size(); i++) {
        output.writeMessage(1, communityCards_.get(i));
      }
      if (pot_ != 0L) {
        output.writeUInt64(2, pot_);
      }
      if (stage_ != thegamblr.StageOuterClass.Stage.PRE_FLOP.getNumber()) {
        output.writeEnum(3, stage_);
      }
      if (smallBlindButton_ != 0) {
        output.writeUInt32(4, smallBlindButton_);
      }
      for (int i = 0; i < players_.size(); i++) {
        output.writeMessage(5, players_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < communityCards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, communityCards_.get(i));
      }
      if (pot_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, pot_);
      }
      if (stage_ != thegamblr.StageOuterClass.Stage.PRE_FLOP.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, stage_);
      }
      if (smallBlindButton_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, smallBlindButton_);
      }
      for (int i = 0; i < players_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, players_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof thegamblr.BoardStateOuterClass.BoardState)) {
        return super.equals(obj);
      }
      thegamblr.BoardStateOuterClass.BoardState other = (thegamblr.BoardStateOuterClass.BoardState) obj;

      if (!getCommunityCardsList()
          .equals(other.getCommunityCardsList())) return false;
      if (getPot()
          != other.getPot()) return false;
      if (stage_ != other.stage_) return false;
      if (getSmallBlindButton()
          != other.getSmallBlindButton()) return false;
      if (!getPlayersList()
          .equals(other.getPlayersList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCommunityCardsCount() > 0) {
        hash = (37 * hash) + COMMUNITY_CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCommunityCardsList().hashCode();
      }
      hash = (37 * hash) + POT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPot());
      hash = (37 * hash) + STAGE_FIELD_NUMBER;
      hash = (53 * hash) + stage_;
      hash = (37 * hash) + SMALLBLINDBUTTON_FIELD_NUMBER;
      hash = (53 * hash) + getSmallBlindButton();
      if (getPlayersCount() > 0) {
        hash = (37 * hash) + PLAYERS_FIELD_NUMBER;
        hash = (53 * hash) + getPlayersList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.BoardStateOuterClass.BoardState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(thegamblr.BoardStateOuterClass.BoardState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code thegamblr.BoardState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:thegamblr.BoardState)
        thegamblr.BoardStateOuterClass.BoardStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return thegamblr.BoardStateOuterClass.internal_static_thegamblr_BoardState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return thegamblr.BoardStateOuterClass.internal_static_thegamblr_BoardState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                thegamblr.BoardStateOuterClass.BoardState.class, thegamblr.BoardStateOuterClass.BoardState.Builder.class);
      }

      // Construct using thegamblr.BoardStateOuterClass.BoardState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCommunityCardsFieldBuilder();
          getPlayersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (communityCardsBuilder_ == null) {
          communityCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          communityCardsBuilder_.clear();
        }
        pot_ = 0L;

        stage_ = 0;

        smallBlindButton_ = 0;

        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          playersBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return thegamblr.BoardStateOuterClass.internal_static_thegamblr_BoardState_descriptor;
      }

      @java.lang.Override
      public thegamblr.BoardStateOuterClass.BoardState getDefaultInstanceForType() {
        return thegamblr.BoardStateOuterClass.BoardState.getDefaultInstance();
      }

      @java.lang.Override
      public thegamblr.BoardStateOuterClass.BoardState build() {
        thegamblr.BoardStateOuterClass.BoardState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public thegamblr.BoardStateOuterClass.BoardState buildPartial() {
        thegamblr.BoardStateOuterClass.BoardState result = new thegamblr.BoardStateOuterClass.BoardState(this);
        int from_bitField0_ = bitField0_;
        if (communityCardsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            communityCards_ = java.util.Collections.unmodifiableList(communityCards_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.communityCards_ = communityCards_;
        } else {
          result.communityCards_ = communityCardsBuilder_.build();
        }
        result.pot_ = pot_;
        result.stage_ = stage_;
        result.smallBlindButton_ = smallBlindButton_;
        if (playersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            players_ = java.util.Collections.unmodifiableList(players_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.players_ = players_;
        } else {
          result.players_ = playersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof thegamblr.BoardStateOuterClass.BoardState) {
          return mergeFrom((thegamblr.BoardStateOuterClass.BoardState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(thegamblr.BoardStateOuterClass.BoardState other) {
        if (other == thegamblr.BoardStateOuterClass.BoardState.getDefaultInstance()) return this;
        if (communityCardsBuilder_ == null) {
          if (!other.communityCards_.isEmpty()) {
            if (communityCards_.isEmpty()) {
              communityCards_ = other.communityCards_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCommunityCardsIsMutable();
              communityCards_.addAll(other.communityCards_);
            }
            onChanged();
          }
        } else {
          if (!other.communityCards_.isEmpty()) {
            if (communityCardsBuilder_.isEmpty()) {
              communityCardsBuilder_.dispose();
              communityCardsBuilder_ = null;
              communityCards_ = other.communityCards_;
              bitField0_ = (bitField0_ & ~0x00000001);
              communityCardsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCommunityCardsFieldBuilder() : null;
            } else {
              communityCardsBuilder_.addAllMessages(other.communityCards_);
            }
          }
        }
        if (other.getPot() != 0L) {
          setPot(other.getPot());
        }
        if (other.stage_ != 0) {
          setStageValue(other.getStageValue());
        }
        if (other.getSmallBlindButton() != 0) {
          setSmallBlindButton(other.getSmallBlindButton());
        }
        if (playersBuilder_ == null) {
          if (!other.players_.isEmpty()) {
            if (players_.isEmpty()) {
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePlayersIsMutable();
              players_.addAll(other.players_);
            }
            onChanged();
          }
        } else {
          if (!other.players_.isEmpty()) {
            if (playersBuilder_.isEmpty()) {
              playersBuilder_.dispose();
              playersBuilder_ = null;
              players_ = other.players_;
              bitField0_ = (bitField0_ & ~0x00000002);
              playersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPlayersFieldBuilder() : null;
            } else {
              playersBuilder_.addAllMessages(other.players_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        thegamblr.BoardStateOuterClass.BoardState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (thegamblr.BoardStateOuterClass.BoardState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<thegamblr.CardOuterClass.Card> communityCards_ =
        java.util.Collections.emptyList();
      private void ensureCommunityCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          communityCards_ = new java.util.ArrayList<thegamblr.CardOuterClass.Card>(communityCards_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder> communityCardsBuilder_;

      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public java.util.List<thegamblr.CardOuterClass.Card> getCommunityCardsList() {
        if (communityCardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(communityCards_);
        } else {
          return communityCardsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public int getCommunityCardsCount() {
        if (communityCardsBuilder_ == null) {
          return communityCards_.size();
        } else {
          return communityCardsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public thegamblr.CardOuterClass.Card getCommunityCards(int index) {
        if (communityCardsBuilder_ == null) {
          return communityCards_.get(index);
        } else {
          return communityCardsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder setCommunityCards(
          int index, thegamblr.CardOuterClass.Card value) {
        if (communityCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommunityCardsIsMutable();
          communityCards_.set(index, value);
          onChanged();
        } else {
          communityCardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder setCommunityCards(
          int index, thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (communityCardsBuilder_ == null) {
          ensureCommunityCardsIsMutable();
          communityCards_.set(index, builderForValue.build());
          onChanged();
        } else {
          communityCardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder addCommunityCards(thegamblr.CardOuterClass.Card value) {
        if (communityCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommunityCardsIsMutable();
          communityCards_.add(value);
          onChanged();
        } else {
          communityCardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder addCommunityCards(
          int index, thegamblr.CardOuterClass.Card value) {
        if (communityCardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommunityCardsIsMutable();
          communityCards_.add(index, value);
          onChanged();
        } else {
          communityCardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder addCommunityCards(
          thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (communityCardsBuilder_ == null) {
          ensureCommunityCardsIsMutable();
          communityCards_.add(builderForValue.build());
          onChanged();
        } else {
          communityCardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder addCommunityCards(
          int index, thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (communityCardsBuilder_ == null) {
          ensureCommunityCardsIsMutable();
          communityCards_.add(index, builderForValue.build());
          onChanged();
        } else {
          communityCardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder addAllCommunityCards(
          java.lang.Iterable<? extends thegamblr.CardOuterClass.Card> values) {
        if (communityCardsBuilder_ == null) {
          ensureCommunityCardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, communityCards_);
          onChanged();
        } else {
          communityCardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder clearCommunityCards() {
        if (communityCardsBuilder_ == null) {
          communityCards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          communityCardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public Builder removeCommunityCards(int index) {
        if (communityCardsBuilder_ == null) {
          ensureCommunityCardsIsMutable();
          communityCards_.remove(index);
          onChanged();
        } else {
          communityCardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder getCommunityCardsBuilder(
          int index) {
        return getCommunityCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public thegamblr.CardOuterClass.CardOrBuilder getCommunityCardsOrBuilder(
          int index) {
        if (communityCardsBuilder_ == null) {
          return communityCards_.get(index);  } else {
          return communityCardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
           getCommunityCardsOrBuilderList() {
        if (communityCardsBuilder_ != null) {
          return communityCardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(communityCards_);
        }
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder addCommunityCardsBuilder() {
        return getCommunityCardsFieldBuilder().addBuilder(
            thegamblr.CardOuterClass.Card.getDefaultInstance());
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder addCommunityCardsBuilder(
          int index) {
        return getCommunityCardsFieldBuilder().addBuilder(
            index, thegamblr.CardOuterClass.Card.getDefaultInstance());
      }
      /**
       * <pre>
       * CommunityCards represent the card available to everyone on the board. They will always be ordered -
       * Cards 0, 1 and 2 will be the flop. Card 3 will be the Turn and card 4 will be the River.
       * </pre>
       *
       * <code>repeated .thegamblr.Card community_cards = 1;</code>
       */
      public java.util.List<thegamblr.CardOuterClass.Card.Builder> 
           getCommunityCardsBuilderList() {
        return getCommunityCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder> 
          getCommunityCardsFieldBuilder() {
        if (communityCardsBuilder_ == null) {
          communityCardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder>(
                  communityCards_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          communityCards_ = null;
        }
        return communityCardsBuilder_;
      }

      private long pot_ ;
      /**
       * <pre>
       * Provides info: How much money is in the pot.
       * </pre>
       *
       * <code>uint64 pot = 2;</code>
       * @return The pot.
       */
      @java.lang.Override
      public long getPot() {
        return pot_;
      }
      /**
       * <pre>
       * Provides info: How much money is in the pot.
       * </pre>
       *
       * <code>uint64 pot = 2;</code>
       * @param value The pot to set.
       * @return This builder for chaining.
       */
      public Builder setPot(long value) {
        
        pot_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Provides info: How much money is in the pot.
       * </pre>
       *
       * <code>uint64 pot = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPot() {
        
        pot_ = 0L;
        onChanged();
        return this;
      }

      private int stage_ = 0;
      /**
       * <pre>
       * Enum representing what stage the current round is in.
       * </pre>
       *
       * <code>.thegamblr.Stage stage = 3;</code>
       * @return The enum numeric value on the wire for stage.
       */
      @java.lang.Override public int getStageValue() {
        return stage_;
      }
      /**
       * <pre>
       * Enum representing what stage the current round is in.
       * </pre>
       *
       * <code>.thegamblr.Stage stage = 3;</code>
       * @param value The enum numeric value on the wire for stage to set.
       * @return This builder for chaining.
       */
      public Builder setStageValue(int value) {
        
        stage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enum representing what stage the current round is in.
       * </pre>
       *
       * <code>.thegamblr.Stage stage = 3;</code>
       * @return The stage.
       */
      @java.lang.Override
      public thegamblr.StageOuterClass.Stage getStage() {
        @SuppressWarnings("deprecation")
        thegamblr.StageOuterClass.Stage result = thegamblr.StageOuterClass.Stage.valueOf(stage_);
        return result == null ? thegamblr.StageOuterClass.Stage.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Enum representing what stage the current round is in.
       * </pre>
       *
       * <code>.thegamblr.Stage stage = 3;</code>
       * @param value The stage to set.
       * @return This builder for chaining.
       */
      public Builder setStage(thegamblr.StageOuterClass.Stage value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        stage_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enum representing what stage the current round is in.
       * </pre>
       *
       * <code>.thegamblr.Stage stage = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStage() {
        
        stage_ = 0;
        onChanged();
        return this;
      }

      private int smallBlindButton_ ;
      /**
       * <pre>
       * An index representing where the small blind button is. The small blind button is the index of the player that pays
       * the small blind and the one that is first to act on the Flop, Turn and River.
       * </pre>
       *
       * <code>uint32 smallBlindButton = 4;</code>
       * @return The smallBlindButton.
       */
      @java.lang.Override
      public int getSmallBlindButton() {
        return smallBlindButton_;
      }
      /**
       * <pre>
       * An index representing where the small blind button is. The small blind button is the index of the player that pays
       * the small blind and the one that is first to act on the Flop, Turn and River.
       * </pre>
       *
       * <code>uint32 smallBlindButton = 4;</code>
       * @param value The smallBlindButton to set.
       * @return This builder for chaining.
       */
      public Builder setSmallBlindButton(int value) {
        
        smallBlindButton_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An index representing where the small blind button is. The small blind button is the index of the player that pays
       * the small blind and the one that is first to act on the Flop, Turn and River.
       * </pre>
       *
       * <code>uint32 smallBlindButton = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSmallBlindButton() {
        
        smallBlindButton_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<thegamblr.PlayerStateOuterClass.PlayerState> players_ =
        java.util.Collections.emptyList();
      private void ensurePlayersIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          players_ = new java.util.ArrayList<thegamblr.PlayerStateOuterClass.PlayerState>(players_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.PlayerStateOuterClass.PlayerState, thegamblr.PlayerStateOuterClass.PlayerState.Builder, thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder> playersBuilder_;

      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public java.util.List<thegamblr.PlayerStateOuterClass.PlayerState> getPlayersList() {
        if (playersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(players_);
        } else {
          return playersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public int getPlayersCount() {
        if (playersBuilder_ == null) {
          return players_.size();
        } else {
          return playersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerState getPlayers(int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);
        } else {
          return playersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder setPlayers(
          int index, thegamblr.PlayerStateOuterClass.PlayerState value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.set(index, value);
          onChanged();
        } else {
          playersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder setPlayers(
          int index, thegamblr.PlayerStateOuterClass.PlayerState.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.set(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder addPlayers(thegamblr.PlayerStateOuterClass.PlayerState value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(value);
          onChanged();
        } else {
          playersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder addPlayers(
          int index, thegamblr.PlayerStateOuterClass.PlayerState value) {
        if (playersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayersIsMutable();
          players_.add(index, value);
          onChanged();
        } else {
          playersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder addPlayers(
          thegamblr.PlayerStateOuterClass.PlayerState.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder addPlayers(
          int index, thegamblr.PlayerStateOuterClass.PlayerState.Builder builderForValue) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.add(index, builderForValue.build());
          onChanged();
        } else {
          playersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder addAllPlayers(
          java.lang.Iterable<? extends thegamblr.PlayerStateOuterClass.PlayerState> values) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, players_);
          onChanged();
        } else {
          playersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder clearPlayers() {
        if (playersBuilder_ == null) {
          players_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          playersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public Builder removePlayers(int index) {
        if (playersBuilder_ == null) {
          ensurePlayersIsMutable();
          players_.remove(index);
          onChanged();
        } else {
          playersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerState.Builder getPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder getPlayersOrBuilder(
          int index) {
        if (playersBuilder_ == null) {
          return players_.get(index);  } else {
          return playersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public java.util.List<? extends thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder> 
           getPlayersOrBuilderList() {
        if (playersBuilder_ != null) {
          return playersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(players_);
        }
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerState.Builder addPlayersBuilder() {
        return getPlayersFieldBuilder().addBuilder(
            thegamblr.PlayerStateOuterClass.PlayerState.getDefaultInstance());
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerState.Builder addPlayersBuilder(
          int index) {
        return getPlayersFieldBuilder().addBuilder(
            index, thegamblr.PlayerStateOuterClass.PlayerState.getDefaultInstance());
      }
      /**
       * <pre>
       * An ordered list of up to 8 players. Some entries may be nil if a seat is empty.
       * </pre>
       *
       * <code>repeated .thegamblr.PlayerState players = 5;</code>
       */
      public java.util.List<thegamblr.PlayerStateOuterClass.PlayerState.Builder> 
           getPlayersBuilderList() {
        return getPlayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.PlayerStateOuterClass.PlayerState, thegamblr.PlayerStateOuterClass.PlayerState.Builder, thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder> 
          getPlayersFieldBuilder() {
        if (playersBuilder_ == null) {
          playersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              thegamblr.PlayerStateOuterClass.PlayerState, thegamblr.PlayerStateOuterClass.PlayerState.Builder, thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder>(
                  players_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          players_ = null;
        }
        return playersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:thegamblr.BoardState)
    }

    // @@protoc_insertion_point(class_scope:thegamblr.BoardState)
    private static final thegamblr.BoardStateOuterClass.BoardState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new thegamblr.BoardStateOuterClass.BoardState();
    }

    public static thegamblr.BoardStateOuterClass.BoardState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BoardState>
        PARSER = new com.google.protobuf.AbstractParser<BoardState>() {
      @java.lang.Override
      public BoardState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BoardState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BoardState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BoardState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public thegamblr.BoardStateOuterClass.BoardState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_thegamblr_BoardState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_thegamblr_BoardState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021board_state.proto\022\tthegamblr\032\ncard.pro" +
      "to\032\013stage.proto\032\022player_state.proto\"\247\001\n\n" +
      "BoardState\022(\n\017community_cards\030\001 \003(\0132\017.th" +
      "egamblr.Card\022\013\n\003pot\030\002 \001(\004\022\037\n\005stage\030\003 \001(\016" +
      "2\020.thegamblr.Stage\022\030\n\020smallBlindButton\030\004" +
      " \001(\r\022\'\n\007players\030\005 \003(\0132\026.thegamblr.Player" +
      "StateB\021Z\017thegamblr/protob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          thegamblr.CardOuterClass.getDescriptor(),
          thegamblr.StageOuterClass.getDescriptor(),
          thegamblr.PlayerStateOuterClass.getDescriptor(),
        });
    internal_static_thegamblr_BoardState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_thegamblr_BoardState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_thegamblr_BoardState_descriptor,
        new java.lang.String[] { "CommunityCards", "Pot", "Stage", "SmallBlindButton", "Players", });
    thegamblr.CardOuterClass.getDescriptor();
    thegamblr.StageOuterClass.getDescriptor();
    thegamblr.PlayerStateOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
