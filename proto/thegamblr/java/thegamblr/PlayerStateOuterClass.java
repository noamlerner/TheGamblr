// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_state.proto

package thegamblr;

public final class PlayerStateOuterClass {
  private PlayerStateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code thegamblr.PlayerStatus}
   */
  public enum PlayerStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>OUT = 0;</code>
     */
    OUT(0),
    /**
     * <code>FOLDED = 1;</code>
     */
    FOLDED(1),
    /**
     * <code>PLAYING = 2;</code>
     */
    PLAYING(2),
    /**
     * <code>ALL_IN = 3;</code>
     */
    ALL_IN(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>OUT = 0;</code>
     */
    public static final int OUT_VALUE = 0;
    /**
     * <code>FOLDED = 1;</code>
     */
    public static final int FOLDED_VALUE = 1;
    /**
     * <code>PLAYING = 2;</code>
     */
    public static final int PLAYING_VALUE = 2;
    /**
     * <code>ALL_IN = 3;</code>
     */
    public static final int ALL_IN_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PlayerStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PlayerStatus forNumber(int value) {
      switch (value) {
        case 0: return OUT;
        case 1: return FOLDED;
        case 2: return PLAYING;
        case 3: return ALL_IN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PlayerStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PlayerStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PlayerStatus>() {
            public PlayerStatus findValueByNumber(int number) {
              return PlayerStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return thegamblr.PlayerStateOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final PlayerStatus[] VALUES = values();

    public static PlayerStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PlayerStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:thegamblr.PlayerStatus)
  }

  public interface PlayerRoundResultsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:thegamblr.PlayerRoundResults)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * How many chips did a player win this round?
     * </pre>
     *
     * <code>uint64 chips_won = 1;</code>
     * @return The chipsWon.
     */
    long getChipsWon();

    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    java.util.List<thegamblr.CardOuterClass.Card> 
        getCardsList();
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    thegamblr.CardOuterClass.Card getCards(int index);
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    int getCardsCount();
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
        getCardsOrBuilderList();
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    thegamblr.CardOuterClass.CardOrBuilder getCardsOrBuilder(
        int index);

    /**
     * <pre>
     * What did their hand make (only available if cards is available).
     * </pre>
     *
     * <code>.thegamblr.HandStrength hand_strength = 3;</code>
     * @return The enum numeric value on the wire for handStrength.
     */
    int getHandStrengthValue();
    /**
     * <pre>
     * What did their hand make (only available if cards is available).
     * </pre>
     *
     * <code>.thegamblr.HandStrength hand_strength = 3;</code>
     * @return The handStrength.
     */
    thegamblr.CardOuterClass.HandStrength getHandStrength();
  }
  /**
   * Protobuf type {@code thegamblr.PlayerRoundResults}
   */
  public static final class PlayerRoundResults extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:thegamblr.PlayerRoundResults)
      PlayerRoundResultsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlayerRoundResults.newBuilder() to construct.
    private PlayerRoundResults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlayerRoundResults() {
      cards_ = java.util.Collections.emptyList();
      handStrength_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PlayerRoundResults();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerRoundResults(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              chipsWon_ = input.readUInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                cards_ = new java.util.ArrayList<thegamblr.CardOuterClass.Card>();
                mutable_bitField0_ |= 0x00000001;
              }
              cards_.add(
                  input.readMessage(thegamblr.CardOuterClass.Card.parser(), extensionRegistry));
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              handStrength_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerRoundResults_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerRoundResults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              thegamblr.PlayerStateOuterClass.PlayerRoundResults.class, thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder.class);
    }

    public static final int CHIPS_WON_FIELD_NUMBER = 1;
    private long chipsWon_;
    /**
     * <pre>
     * How many chips did a player win this round?
     * </pre>
     *
     * <code>uint64 chips_won = 1;</code>
     * @return The chipsWon.
     */
    @java.lang.Override
    public long getChipsWon() {
      return chipsWon_;
    }

    public static final int CARDS_FIELD_NUMBER = 2;
    private java.util.List<thegamblr.CardOuterClass.Card> cards_;
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    @java.lang.Override
    public java.util.List<thegamblr.CardOuterClass.Card> getCardsList() {
      return cards_;
    }
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
        getCardsOrBuilderList() {
      return cards_;
    }
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    @java.lang.Override
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    @java.lang.Override
    public thegamblr.CardOuterClass.Card getCards(int index) {
      return cards_.get(index);
    }
    /**
     * <pre>
     * What cards did a player hold (may be null if the player mucked).
     * </pre>
     *
     * <code>repeated .thegamblr.Card cards = 2;</code>
     */
    @java.lang.Override
    public thegamblr.CardOuterClass.CardOrBuilder getCardsOrBuilder(
        int index) {
      return cards_.get(index);
    }

    public static final int HAND_STRENGTH_FIELD_NUMBER = 3;
    private int handStrength_;
    /**
     * <pre>
     * What did their hand make (only available if cards is available).
     * </pre>
     *
     * <code>.thegamblr.HandStrength hand_strength = 3;</code>
     * @return The enum numeric value on the wire for handStrength.
     */
    @java.lang.Override public int getHandStrengthValue() {
      return handStrength_;
    }
    /**
     * <pre>
     * What did their hand make (only available if cards is available).
     * </pre>
     *
     * <code>.thegamblr.HandStrength hand_strength = 3;</code>
     * @return The handStrength.
     */
    @java.lang.Override public thegamblr.CardOuterClass.HandStrength getHandStrength() {
      @SuppressWarnings("deprecation")
      thegamblr.CardOuterClass.HandStrength result = thegamblr.CardOuterClass.HandStrength.valueOf(handStrength_);
      return result == null ? thegamblr.CardOuterClass.HandStrength.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chipsWon_ != 0L) {
        output.writeUInt64(1, chipsWon_);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeMessage(2, cards_.get(i));
      }
      if (handStrength_ != thegamblr.CardOuterClass.HandStrength.UNSET.getNumber()) {
        output.writeEnum(3, handStrength_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (chipsWon_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, chipsWon_);
      }
      for (int i = 0; i < cards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, cards_.get(i));
      }
      if (handStrength_ != thegamblr.CardOuterClass.HandStrength.UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, handStrength_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof thegamblr.PlayerStateOuterClass.PlayerRoundResults)) {
        return super.equals(obj);
      }
      thegamblr.PlayerStateOuterClass.PlayerRoundResults other = (thegamblr.PlayerStateOuterClass.PlayerRoundResults) obj;

      if (getChipsWon()
          != other.getChipsWon()) return false;
      if (!getCardsList()
          .equals(other.getCardsList())) return false;
      if (handStrength_ != other.handStrength_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CHIPS_WON_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getChipsWon());
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (37 * hash) + HAND_STRENGTH_FIELD_NUMBER;
      hash = (53 * hash) + handStrength_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(thegamblr.PlayerStateOuterClass.PlayerRoundResults prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code thegamblr.PlayerRoundResults}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:thegamblr.PlayerRoundResults)
        thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerRoundResults_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerRoundResults_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                thegamblr.PlayerStateOuterClass.PlayerRoundResults.class, thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder.class);
      }

      // Construct using thegamblr.PlayerStateOuterClass.PlayerRoundResults.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCardsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        chipsWon_ = 0L;

        if (cardsBuilder_ == null) {
          cards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          cardsBuilder_.clear();
        }
        handStrength_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerRoundResults_descriptor;
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerRoundResults getDefaultInstanceForType() {
        return thegamblr.PlayerStateOuterClass.PlayerRoundResults.getDefaultInstance();
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerRoundResults build() {
        thegamblr.PlayerStateOuterClass.PlayerRoundResults result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerRoundResults buildPartial() {
        thegamblr.PlayerStateOuterClass.PlayerRoundResults result = new thegamblr.PlayerStateOuterClass.PlayerRoundResults(this);
        int from_bitField0_ = bitField0_;
        result.chipsWon_ = chipsWon_;
        if (cardsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            cards_ = java.util.Collections.unmodifiableList(cards_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cards_ = cards_;
        } else {
          result.cards_ = cardsBuilder_.build();
        }
        result.handStrength_ = handStrength_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof thegamblr.PlayerStateOuterClass.PlayerRoundResults) {
          return mergeFrom((thegamblr.PlayerStateOuterClass.PlayerRoundResults)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(thegamblr.PlayerStateOuterClass.PlayerRoundResults other) {
        if (other == thegamblr.PlayerStateOuterClass.PlayerRoundResults.getDefaultInstance()) return this;
        if (other.getChipsWon() != 0L) {
          setChipsWon(other.getChipsWon());
        }
        if (cardsBuilder_ == null) {
          if (!other.cards_.isEmpty()) {
            if (cards_.isEmpty()) {
              cards_ = other.cards_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCardsIsMutable();
              cards_.addAll(other.cards_);
            }
            onChanged();
          }
        } else {
          if (!other.cards_.isEmpty()) {
            if (cardsBuilder_.isEmpty()) {
              cardsBuilder_.dispose();
              cardsBuilder_ = null;
              cards_ = other.cards_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cardsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCardsFieldBuilder() : null;
            } else {
              cardsBuilder_.addAllMessages(other.cards_);
            }
          }
        }
        if (other.handStrength_ != 0) {
          setHandStrengthValue(other.getHandStrengthValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        thegamblr.PlayerStateOuterClass.PlayerRoundResults parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (thegamblr.PlayerStateOuterClass.PlayerRoundResults) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long chipsWon_ ;
      /**
       * <pre>
       * How many chips did a player win this round?
       * </pre>
       *
       * <code>uint64 chips_won = 1;</code>
       * @return The chipsWon.
       */
      @java.lang.Override
      public long getChipsWon() {
        return chipsWon_;
      }
      /**
       * <pre>
       * How many chips did a player win this round?
       * </pre>
       *
       * <code>uint64 chips_won = 1;</code>
       * @param value The chipsWon to set.
       * @return This builder for chaining.
       */
      public Builder setChipsWon(long value) {
        
        chipsWon_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * How many chips did a player win this round?
       * </pre>
       *
       * <code>uint64 chips_won = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearChipsWon() {
        
        chipsWon_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<thegamblr.CardOuterClass.Card> cards_ =
        java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          cards_ = new java.util.ArrayList<thegamblr.CardOuterClass.Card>(cards_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder> cardsBuilder_;

      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public java.util.List<thegamblr.CardOuterClass.Card> getCardsList() {
        if (cardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cards_);
        } else {
          return cardsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public int getCardsCount() {
        if (cardsBuilder_ == null) {
          return cards_.size();
        } else {
          return cardsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public thegamblr.CardOuterClass.Card getCards(int index) {
        if (cardsBuilder_ == null) {
          return cards_.get(index);
        } else {
          return cardsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder setCards(
          int index, thegamblr.CardOuterClass.Card value) {
        if (cardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsIsMutable();
          cards_.set(index, value);
          onChanged();
        } else {
          cardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder setCards(
          int index, thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (cardsBuilder_ == null) {
          ensureCardsIsMutable();
          cards_.set(index, builderForValue.build());
          onChanged();
        } else {
          cardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder addCards(thegamblr.CardOuterClass.Card value) {
        if (cardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsIsMutable();
          cards_.add(value);
          onChanged();
        } else {
          cardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder addCards(
          int index, thegamblr.CardOuterClass.Card value) {
        if (cardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCardsIsMutable();
          cards_.add(index, value);
          onChanged();
        } else {
          cardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder addCards(
          thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (cardsBuilder_ == null) {
          ensureCardsIsMutable();
          cards_.add(builderForValue.build());
          onChanged();
        } else {
          cardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder addCards(
          int index, thegamblr.CardOuterClass.Card.Builder builderForValue) {
        if (cardsBuilder_ == null) {
          ensureCardsIsMutable();
          cards_.add(index, builderForValue.build());
          onChanged();
        } else {
          cardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends thegamblr.CardOuterClass.Card> values) {
        if (cardsBuilder_ == null) {
          ensureCardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cards_);
          onChanged();
        } else {
          cardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder clearCards() {
        if (cardsBuilder_ == null) {
          cards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public Builder removeCards(int index) {
        if (cardsBuilder_ == null) {
          ensureCardsIsMutable();
          cards_.remove(index);
          onChanged();
        } else {
          cardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder getCardsBuilder(
          int index) {
        return getCardsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public thegamblr.CardOuterClass.CardOrBuilder getCardsOrBuilder(
          int index) {
        if (cardsBuilder_ == null) {
          return cards_.get(index);  } else {
          return cardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public java.util.List<? extends thegamblr.CardOuterClass.CardOrBuilder> 
           getCardsOrBuilderList() {
        if (cardsBuilder_ != null) {
          return cardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cards_);
        }
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder addCardsBuilder() {
        return getCardsFieldBuilder().addBuilder(
            thegamblr.CardOuterClass.Card.getDefaultInstance());
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public thegamblr.CardOuterClass.Card.Builder addCardsBuilder(
          int index) {
        return getCardsFieldBuilder().addBuilder(
            index, thegamblr.CardOuterClass.Card.getDefaultInstance());
      }
      /**
       * <pre>
       * What cards did a player hold (may be null if the player mucked).
       * </pre>
       *
       * <code>repeated .thegamblr.Card cards = 2;</code>
       */
      public java.util.List<thegamblr.CardOuterClass.Card.Builder> 
           getCardsBuilderList() {
        return getCardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder> 
          getCardsFieldBuilder() {
        if (cardsBuilder_ == null) {
          cardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              thegamblr.CardOuterClass.Card, thegamblr.CardOuterClass.Card.Builder, thegamblr.CardOuterClass.CardOrBuilder>(
                  cards_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          cards_ = null;
        }
        return cardsBuilder_;
      }

      private int handStrength_ = 0;
      /**
       * <pre>
       * What did their hand make (only available if cards is available).
       * </pre>
       *
       * <code>.thegamblr.HandStrength hand_strength = 3;</code>
       * @return The enum numeric value on the wire for handStrength.
       */
      @java.lang.Override public int getHandStrengthValue() {
        return handStrength_;
      }
      /**
       * <pre>
       * What did their hand make (only available if cards is available).
       * </pre>
       *
       * <code>.thegamblr.HandStrength hand_strength = 3;</code>
       * @param value The enum numeric value on the wire for handStrength to set.
       * @return This builder for chaining.
       */
      public Builder setHandStrengthValue(int value) {
        
        handStrength_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * What did their hand make (only available if cards is available).
       * </pre>
       *
       * <code>.thegamblr.HandStrength hand_strength = 3;</code>
       * @return The handStrength.
       */
      @java.lang.Override
      public thegamblr.CardOuterClass.HandStrength getHandStrength() {
        @SuppressWarnings("deprecation")
        thegamblr.CardOuterClass.HandStrength result = thegamblr.CardOuterClass.HandStrength.valueOf(handStrength_);
        return result == null ? thegamblr.CardOuterClass.HandStrength.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * What did their hand make (only available if cards is available).
       * </pre>
       *
       * <code>.thegamblr.HandStrength hand_strength = 3;</code>
       * @param value The handStrength to set.
       * @return This builder for chaining.
       */
      public Builder setHandStrength(thegamblr.CardOuterClass.HandStrength value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        handStrength_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * What did their hand make (only available if cards is available).
       * </pre>
       *
       * <code>.thegamblr.HandStrength hand_strength = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHandStrength() {
        
        handStrength_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:thegamblr.PlayerRoundResults)
    }

    // @@protoc_insertion_point(class_scope:thegamblr.PlayerRoundResults)
    private static final thegamblr.PlayerStateOuterClass.PlayerRoundResults DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new thegamblr.PlayerStateOuterClass.PlayerRoundResults();
    }

    public static thegamblr.PlayerStateOuterClass.PlayerRoundResults getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PlayerRoundResults>
        PARSER = new com.google.protobuf.AbstractParser<PlayerRoundResults>() {
      @java.lang.Override
      public PlayerRoundResults parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerRoundResults(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlayerRoundResults> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerRoundResults> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerRoundResults getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PlayerStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:thegamblr.PlayerState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Information representing how much money this player has to bet with.
     * </pre>
     *
     * <code>uint64 stack = 1;</code>
     * @return The stack.
     */
    long getStack();

    /**
     * <pre>
     * An enum representing the Players Status.
     * </pre>
     *
     * <code>.thegamblr.PlayerStatus status = 2;</code>
     * @return The enum numeric value on the wire for status.
     */
    int getStatusValue();
    /**
     * <pre>
     * An enum representing the Players Status.
     * </pre>
     *
     * <code>.thegamblr.PlayerStatus status = 2;</code>
     * @return The status.
     */
    thegamblr.PlayerStateOuterClass.PlayerStatus getStatus();

    /**
     * <pre>
     * The players position at the table.
     * </pre>
     *
     * <code>int32 seat_number = 3;</code>
     * @return The seatNumber.
     */
    int getSeatNumber();

    /**
     * <pre>
     * An ID provided by the player upon game registration.
     * </pre>
     *
     * <code>string id = 4;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * An ID provided by the player upon game registration.
     * </pre>
     *
     * <code>string id = 4;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     * @return Whether the roundResults field is set.
     */
    boolean hasRoundResults();
    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     * @return The roundResults.
     */
    thegamblr.PlayerStateOuterClass.PlayerRoundResults getRoundResults();
    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     */
    thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder getRoundResultsOrBuilder();
  }
  /**
   * Protobuf type {@code thegamblr.PlayerState}
   */
  public static final class PlayerState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:thegamblr.PlayerState)
      PlayerStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PlayerState.newBuilder() to construct.
    private PlayerState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PlayerState() {
      status_ = 0;
      id_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PlayerState();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              stack_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              status_ = rawValue;
              break;
            }
            case 24: {

              seatNumber_ = input.readInt32();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 42: {
              thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder subBuilder = null;
              if (roundResults_ != null) {
                subBuilder = roundResults_.toBuilder();
              }
              roundResults_ = input.readMessage(thegamblr.PlayerStateOuterClass.PlayerRoundResults.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roundResults_);
                roundResults_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              thegamblr.PlayerStateOuterClass.PlayerState.class, thegamblr.PlayerStateOuterClass.PlayerState.Builder.class);
    }

    public static final int STACK_FIELD_NUMBER = 1;
    private long stack_;
    /**
     * <pre>
     * Information representing how much money this player has to bet with.
     * </pre>
     *
     * <code>uint64 stack = 1;</code>
     * @return The stack.
     */
    @java.lang.Override
    public long getStack() {
      return stack_;
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private int status_;
    /**
     * <pre>
     * An enum representing the Players Status.
     * </pre>
     *
     * <code>.thegamblr.PlayerStatus status = 2;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override public int getStatusValue() {
      return status_;
    }
    /**
     * <pre>
     * An enum representing the Players Status.
     * </pre>
     *
     * <code>.thegamblr.PlayerStatus status = 2;</code>
     * @return The status.
     */
    @java.lang.Override public thegamblr.PlayerStateOuterClass.PlayerStatus getStatus() {
      @SuppressWarnings("deprecation")
      thegamblr.PlayerStateOuterClass.PlayerStatus result = thegamblr.PlayerStateOuterClass.PlayerStatus.valueOf(status_);
      return result == null ? thegamblr.PlayerStateOuterClass.PlayerStatus.UNRECOGNIZED : result;
    }

    public static final int SEAT_NUMBER_FIELD_NUMBER = 3;
    private int seatNumber_;
    /**
     * <pre>
     * The players position at the table.
     * </pre>
     *
     * <code>int32 seat_number = 3;</code>
     * @return The seatNumber.
     */
    @java.lang.Override
    public int getSeatNumber() {
      return seatNumber_;
    }

    public static final int ID_FIELD_NUMBER = 4;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * An ID provided by the player upon game registration.
     * </pre>
     *
     * <code>string id = 4;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An ID provided by the player upon game registration.
     * </pre>
     *
     * <code>string id = 4;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ROUND_RESULTS_FIELD_NUMBER = 5;
    private thegamblr.PlayerStateOuterClass.PlayerRoundResults roundResults_;
    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     * @return Whether the roundResults field is set.
     */
    @java.lang.Override
    public boolean hasRoundResults() {
      return roundResults_ != null;
    }
    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     * @return The roundResults.
     */
    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerRoundResults getRoundResults() {
      return roundResults_ == null ? thegamblr.PlayerStateOuterClass.PlayerRoundResults.getDefaultInstance() : roundResults_;
    }
    /**
     * <pre>
     * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
     * like how much money this player won and what cards they were playing with.
     * </pre>
     *
     * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
     */
    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder getRoundResultsOrBuilder() {
      return getRoundResults();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (stack_ != 0L) {
        output.writeUInt64(1, stack_);
      }
      if (status_ != thegamblr.PlayerStateOuterClass.PlayerStatus.OUT.getNumber()) {
        output.writeEnum(2, status_);
      }
      if (seatNumber_ != 0) {
        output.writeInt32(3, seatNumber_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, id_);
      }
      if (roundResults_ != null) {
        output.writeMessage(5, getRoundResults());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (stack_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, stack_);
      }
      if (status_ != thegamblr.PlayerStateOuterClass.PlayerStatus.OUT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, status_);
      }
      if (seatNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, seatNumber_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, id_);
      }
      if (roundResults_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRoundResults());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof thegamblr.PlayerStateOuterClass.PlayerState)) {
        return super.equals(obj);
      }
      thegamblr.PlayerStateOuterClass.PlayerState other = (thegamblr.PlayerStateOuterClass.PlayerState) obj;

      if (getStack()
          != other.getStack()) return false;
      if (status_ != other.status_) return false;
      if (getSeatNumber()
          != other.getSeatNumber()) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (hasRoundResults() != other.hasRoundResults()) return false;
      if (hasRoundResults()) {
        if (!getRoundResults()
            .equals(other.getRoundResults())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STACK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStack());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + status_;
      hash = (37 * hash) + SEAT_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getSeatNumber();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      if (hasRoundResults()) {
        hash = (37 * hash) + ROUND_RESULTS_FIELD_NUMBER;
        hash = (53 * hash) + getRoundResults().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static thegamblr.PlayerStateOuterClass.PlayerState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(thegamblr.PlayerStateOuterClass.PlayerState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code thegamblr.PlayerState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:thegamblr.PlayerState)
        thegamblr.PlayerStateOuterClass.PlayerStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                thegamblr.PlayerStateOuterClass.PlayerState.class, thegamblr.PlayerStateOuterClass.PlayerState.Builder.class);
      }

      // Construct using thegamblr.PlayerStateOuterClass.PlayerState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        stack_ = 0L;

        status_ = 0;

        seatNumber_ = 0;

        id_ = "";

        if (roundResultsBuilder_ == null) {
          roundResults_ = null;
        } else {
          roundResults_ = null;
          roundResultsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return thegamblr.PlayerStateOuterClass.internal_static_thegamblr_PlayerState_descriptor;
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerState getDefaultInstanceForType() {
        return thegamblr.PlayerStateOuterClass.PlayerState.getDefaultInstance();
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerState build() {
        thegamblr.PlayerStateOuterClass.PlayerState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerState buildPartial() {
        thegamblr.PlayerStateOuterClass.PlayerState result = new thegamblr.PlayerStateOuterClass.PlayerState(this);
        result.stack_ = stack_;
        result.status_ = status_;
        result.seatNumber_ = seatNumber_;
        result.id_ = id_;
        if (roundResultsBuilder_ == null) {
          result.roundResults_ = roundResults_;
        } else {
          result.roundResults_ = roundResultsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof thegamblr.PlayerStateOuterClass.PlayerState) {
          return mergeFrom((thegamblr.PlayerStateOuterClass.PlayerState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(thegamblr.PlayerStateOuterClass.PlayerState other) {
        if (other == thegamblr.PlayerStateOuterClass.PlayerState.getDefaultInstance()) return this;
        if (other.getStack() != 0L) {
          setStack(other.getStack());
        }
        if (other.status_ != 0) {
          setStatusValue(other.getStatusValue());
        }
        if (other.getSeatNumber() != 0) {
          setSeatNumber(other.getSeatNumber());
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (other.hasRoundResults()) {
          mergeRoundResults(other.getRoundResults());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        thegamblr.PlayerStateOuterClass.PlayerState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (thegamblr.PlayerStateOuterClass.PlayerState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long stack_ ;
      /**
       * <pre>
       * Information representing how much money this player has to bet with.
       * </pre>
       *
       * <code>uint64 stack = 1;</code>
       * @return The stack.
       */
      @java.lang.Override
      public long getStack() {
        return stack_;
      }
      /**
       * <pre>
       * Information representing how much money this player has to bet with.
       * </pre>
       *
       * <code>uint64 stack = 1;</code>
       * @param value The stack to set.
       * @return This builder for chaining.
       */
      public Builder setStack(long value) {
        
        stack_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Information representing how much money this player has to bet with.
       * </pre>
       *
       * <code>uint64 stack = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStack() {
        
        stack_ = 0L;
        onChanged();
        return this;
      }

      private int status_ = 0;
      /**
       * <pre>
       * An enum representing the Players Status.
       * </pre>
       *
       * <code>.thegamblr.PlayerStatus status = 2;</code>
       * @return The enum numeric value on the wire for status.
       */
      @java.lang.Override public int getStatusValue() {
        return status_;
      }
      /**
       * <pre>
       * An enum representing the Players Status.
       * </pre>
       *
       * <code>.thegamblr.PlayerStatus status = 2;</code>
       * @param value The enum numeric value on the wire for status to set.
       * @return This builder for chaining.
       */
      public Builder setStatusValue(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An enum representing the Players Status.
       * </pre>
       *
       * <code>.thegamblr.PlayerStatus status = 2;</code>
       * @return The status.
       */
      @java.lang.Override
      public thegamblr.PlayerStateOuterClass.PlayerStatus getStatus() {
        @SuppressWarnings("deprecation")
        thegamblr.PlayerStateOuterClass.PlayerStatus result = thegamblr.PlayerStateOuterClass.PlayerStatus.valueOf(status_);
        return result == null ? thegamblr.PlayerStateOuterClass.PlayerStatus.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * An enum representing the Players Status.
       * </pre>
       *
       * <code>.thegamblr.PlayerStatus status = 2;</code>
       * @param value The status to set.
       * @return This builder for chaining.
       */
      public Builder setStatus(thegamblr.PlayerStateOuterClass.PlayerStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        status_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An enum representing the Players Status.
       * </pre>
       *
       * <code>.thegamblr.PlayerStatus status = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private int seatNumber_ ;
      /**
       * <pre>
       * The players position at the table.
       * </pre>
       *
       * <code>int32 seat_number = 3;</code>
       * @return The seatNumber.
       */
      @java.lang.Override
      public int getSeatNumber() {
        return seatNumber_;
      }
      /**
       * <pre>
       * The players position at the table.
       * </pre>
       *
       * <code>int32 seat_number = 3;</code>
       * @param value The seatNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSeatNumber(int value) {
        
        seatNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The players position at the table.
       * </pre>
       *
       * <code>int32 seat_number = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSeatNumber() {
        
        seatNumber_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * An ID provided by the player upon game registration.
       * </pre>
       *
       * <code>string id = 4;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An ID provided by the player upon game registration.
       * </pre>
       *
       * <code>string id = 4;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An ID provided by the player upon game registration.
       * </pre>
       *
       * <code>string id = 4;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An ID provided by the player upon game registration.
       * </pre>
       *
       * <code>string id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An ID provided by the player upon game registration.
       * </pre>
       *
       * <code>string id = 4;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private thegamblr.PlayerStateOuterClass.PlayerRoundResults roundResults_;
      private com.google.protobuf.SingleFieldBuilderV3<
          thegamblr.PlayerStateOuterClass.PlayerRoundResults, thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder, thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder> roundResultsBuilder_;
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       * @return Whether the roundResults field is set.
       */
      public boolean hasRoundResults() {
        return roundResultsBuilder_ != null || roundResults_ != null;
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       * @return The roundResults.
       */
      public thegamblr.PlayerStateOuterClass.PlayerRoundResults getRoundResults() {
        if (roundResultsBuilder_ == null) {
          return roundResults_ == null ? thegamblr.PlayerStateOuterClass.PlayerRoundResults.getDefaultInstance() : roundResults_;
        } else {
          return roundResultsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public Builder setRoundResults(thegamblr.PlayerStateOuterClass.PlayerRoundResults value) {
        if (roundResultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roundResults_ = value;
          onChanged();
        } else {
          roundResultsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public Builder setRoundResults(
          thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder builderForValue) {
        if (roundResultsBuilder_ == null) {
          roundResults_ = builderForValue.build();
          onChanged();
        } else {
          roundResultsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public Builder mergeRoundResults(thegamblr.PlayerStateOuterClass.PlayerRoundResults value) {
        if (roundResultsBuilder_ == null) {
          if (roundResults_ != null) {
            roundResults_ =
              thegamblr.PlayerStateOuterClass.PlayerRoundResults.newBuilder(roundResults_).mergeFrom(value).buildPartial();
          } else {
            roundResults_ = value;
          }
          onChanged();
        } else {
          roundResultsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public Builder clearRoundResults() {
        if (roundResultsBuilder_ == null) {
          roundResults_ = null;
          onChanged();
        } else {
          roundResults_ = null;
          roundResultsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder getRoundResultsBuilder() {
        
        onChanged();
        return getRoundResultsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      public thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder getRoundResultsOrBuilder() {
        if (roundResultsBuilder_ != null) {
          return roundResultsBuilder_.getMessageOrBuilder();
        } else {
          return roundResults_ == null ?
              thegamblr.PlayerStateOuterClass.PlayerRoundResults.getDefaultInstance() : roundResults_;
        }
      }
      /**
       * <pre>
       * This will be Null unless a round has just complete or if this player mucked. Otherwise, this will provide info
       * like how much money this player won and what cards they were playing with.
       * </pre>
       *
       * <code>.thegamblr.PlayerRoundResults round_results = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          thegamblr.PlayerStateOuterClass.PlayerRoundResults, thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder, thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder> 
          getRoundResultsFieldBuilder() {
        if (roundResultsBuilder_ == null) {
          roundResultsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              thegamblr.PlayerStateOuterClass.PlayerRoundResults, thegamblr.PlayerStateOuterClass.PlayerRoundResults.Builder, thegamblr.PlayerStateOuterClass.PlayerRoundResultsOrBuilder>(
                  getRoundResults(),
                  getParentForChildren(),
                  isClean());
          roundResults_ = null;
        }
        return roundResultsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:thegamblr.PlayerState)
    }

    // @@protoc_insertion_point(class_scope:thegamblr.PlayerState)
    private static final thegamblr.PlayerStateOuterClass.PlayerState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new thegamblr.PlayerStateOuterClass.PlayerState();
    }

    public static thegamblr.PlayerStateOuterClass.PlayerState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PlayerState>
        PARSER = new com.google.protobuf.AbstractParser<PlayerState>() {
      @java.lang.Override
      public PlayerState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PlayerState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public thegamblr.PlayerStateOuterClass.PlayerState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_thegamblr_PlayerRoundResults_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_thegamblr_PlayerRoundResults_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_thegamblr_PlayerState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_thegamblr_PlayerState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022player_state.proto\022\tthegamblr\032\ncard.pr" +
      "oto\"w\n\022PlayerRoundResults\022\021\n\tchips_won\030\001" +
      " \001(\004\022\036\n\005cards\030\002 \003(\0132\017.thegamblr.Card\022.\n\r" +
      "hand_strength\030\003 \001(\0162\027.thegamblr.HandStre" +
      "ngth\"\234\001\n\013PlayerState\022\r\n\005stack\030\001 \001(\004\022\'\n\006s" +
      "tatus\030\002 \001(\0162\027.thegamblr.PlayerStatus\022\023\n\013" +
      "seat_number\030\003 \001(\005\022\n\n\002id\030\004 \001(\t\0224\n\rround_r" +
      "esults\030\005 \001(\0132\035.thegamblr.PlayerRoundResu" +
      "lts*<\n\014PlayerStatus\022\007\n\003OUT\020\000\022\n\n\006FOLDED\020\001" +
      "\022\013\n\007PLAYING\020\002\022\n\n\006ALL_IN\020\003B\021Z\017thegamblr/p" +
      "rotob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          thegamblr.CardOuterClass.getDescriptor(),
        });
    internal_static_thegamblr_PlayerRoundResults_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_thegamblr_PlayerRoundResults_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_thegamblr_PlayerRoundResults_descriptor,
        new java.lang.String[] { "ChipsWon", "Cards", "HandStrength", });
    internal_static_thegamblr_PlayerState_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_thegamblr_PlayerState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_thegamblr_PlayerState_descriptor,
        new java.lang.String[] { "Stack", "Status", "SeatNumber", "Id", "RoundResults", });
    thegamblr.CardOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
