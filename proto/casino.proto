syntax = "proto3";

package thegamblr;
option go_package = "thegamblr/proto";

import "board_state.proto";
import "action.proto";
import "card.proto";

message MyActionPacket {
  // The current pot which is the pot at the beginning of this stage + all the chips people put in.
  uint64 currentPot = 1;
  // The total call amount (i.e. every player has to put in 100 chips).
  uint64 call_amount = 2;
  // The amount left for this particular player to call (you already put in 50, this would be 50).
  uint64 left_to_call = 3;
}

message Update {
  oneof update {
    // The current state of the board. Only gets included once per stage. So you will get this once PreFlop, and then it
    // will be null until the Flop.
    BoardState board_state = 1;
    // These will tell you all actions player's took since the last response you received.
    Action action_update = 2;
  }
  // The sequence number of this update. Provide the last one you received in your next request to avoid getting
  // repeats.
  uint64 sequence_number = 3;
}
message ReceiveUpdatesRequest{
  string token = 1;
  uint64 sequence_number = 2;
}

message ReceiveUpdatesResponse{
  repeated Update updates = 1;
  // This wil be nil unless it is your action. If it is your action, this will contain info that can help you make
  // a decision. Once this is not-nil, you are expected to call Act()
  MyActionPacket my_action_packet = 2;
  // You will always get this when you get the PreFlop board_state. Otherwise this will be nil.
  repeated Card my_hand = 3;
  // This is the action update you should include in the next request.
  uint64 next_sequence_number = 4;
}

message ActRequest {
  // the token you recieved in the JoinGameRequest. If you do not have this, your request will be ignored.
  string token = 1;
  // What action are you taking? If this is invalid you will be folded.
  ActionType action_type = 2;
  // You only need to include this if you choose Raise and you want to Raise anything other than the min raise.
  // If this is less than the min raise, it will automatically be increased to the min raise. It will be ignored in
  // all other cases.
  int64 amount = 3;
}

message ActResponse {}

message JoinGameRequest{
  // Give your player a name.
  string player_id = 1;
  // What game are you joining?
  string game_id = 2;
}

message JoinGameResponse {
  // Keep this token for future requests.
  string token = 1;
  // This is the seat you have been placed it.
  uint32 seat_number = 2;
  // Your ID, should match what was in your request unless there was a conflict.
  string player_id = 3;
}

message CreateGameRequest {
  // how much is the small blind? big blind is 2x. Defaults to 5 if not set (0)
  uint64 small_blind = 1;
  // NumRounds defines how many rounds will be played in this game. If this is -1, we will play until there is only
  // one player left with chips. Defaults to 200 if not set (0).
  uint64 num_rounds = 2;
  // how many chips does each player start with? Defaults to 1000 if not set (0).
  uint64 starting_stack = 3;
}

message CreateGameResponse {
  // You and others will need this to join the game.
  string game_id = 1;
}

message StartGameRequest {
  // token must belong to the person who created the game
  string token = 2;
}
message StartGameResponse {
}

service Casino {
  // CreateGame creates a game that players can join. The response returns a game_id which is needed by players
  // to register.
  rpc CreateGame(CreateGameRequest) returns (CreateGameResponse);
  // JoinGame allows players to join a game created by CreateGame. A player provided PlayerId is required.
  // In the response object, the player will receive a player_id which should match unless it was taken, in which case
  // it will have a number appended to it. The response also provides the players seat number and a token. The token
  // is necessary to pass up in Action requests to verify who is performing the action.
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse);
  // StartGame start the game!
  rpc StartGame(StartGameRequest) returns (StartGameResponse);
  // ReceiveUpdates will return a list of Actions that have occurred since the last time this was called. This should
  // be constantly polled. It will also return a bool indicating if it is this player's turn. If it is, a call to Act
  // is expected.
  rpc ReceiveUpdates(ReceiveUpdatesRequest) returns (ReceiveUpdatesResponse);
  // Act allows a player to specify the action they want to take. Invalid actions will result in a Fold.
  // If a player tries to put in more chips than they have, they will be put all in. If a player tries to Raise with
  // less chips than is the minimum raise, they will automatically raise the minimum raise.
  rpc Act(ActRequest) returns (ActResponse);
}